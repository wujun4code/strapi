name: 'CI'

on:
  pull_request:
    paths-ignore:
      - 'docs/**'

env:
  STRAPI_LICENSE: ${{ secrets.strapiLicense }}

jobs:
  lint:
    name: 'lint (node: ${{ matrix.node }})'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [12, 14]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node }}
      - name: Install modules
        run: yarn
      - name: Run lint
        run: yarn run -s lint

  unit_back:
    name: 'unit_back (node: ${{ matrix.node }})'
    needs: [lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [12, 14]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node }}
      - name: Install modules
        run: yarn
      - name: Run test
        run: yarn run -s test:unit

  unit_front:
    name: 'unit_front (node: ${{ matrix.node }})'
    needs: [lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [12, 14]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node }}
      - name: Install modules
        run: yarn
      - name: Run test
        run: yarn run -s test:unit

  e2e_ce_pg:
    runs-on: ubuntu-latest
    needs: [lint, unit_back, unit_front]
    name: 'E2E (pg:${{ matrix.postgres }} node: ${{ matrix.node }})'
    strategy:
      matrix:
        node: [12, 14]
        postgres: [12]
      max-parallel: 2
    services:
      postgres:
        # Docker Hub image
        image: postgres:${{ matrix.postgres }}
        # Provide the password for postgres
        env:
          POSTGRES_USER: strapi
          POSTGRES_PASSWORD: strapi
          POSTGRES_DB: strapi_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node }}
      - name: Install modules
        run: |
          yarn && yarn global add wait-on
          echo "$(yarn global bin)" >> $GITHUB_PATH
      - name: Generate test app
        run: STRAPI_DISABLE_EE=true yarn run -s test:generate-app --dbclient=postgres --dbhost=localhost --dbport=5432 --dbname=strapi_test --dbusername=strapi --dbpassword=strapi
      - name: Run tests
        run: |
          STRAPI_DISABLE_EE=true yarn run -s test:start-app & wait-on http://localhost:1337
          STRAPI_DISABLE_EE=true yarn run -s test:e2e

  e2e_ce_mysql:
    runs-on: ubuntu-latest
    needs: [lint, unit_back, unit_front]
    name: 'E2E (mysql node: ${{ matrix.node }})'
    strategy:
      matrix:
        node: [12, 14]
      max-parallel: 2
    services:
      mysql:
        image: mysql
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          -e MYSQL_ROOT_PASSWORD=strapi
          -e MYSQL_ROOT_HOST="%"
          -e MYSQL_USER=strapi
          -e MYSQL_PASSWORD=strapi
          -e MYSQL_DATABASE=strapi_test
          --entrypoint sh mysql -c "exec docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"
        ports:
          # Maps tcp port 5432 on service container to the host
          - 3306:3306
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node }}
      - name: Install modules
        run: |
          yarn && yarn global add wait-on
          echo "$(yarn global bin)" >> $GITHUB_PATH
      - name: Generate test app
        run: STRAPI_DISABLE_EE=true yarn run -s test:generate-app --dbclient=mysql --dbhost=localhost --dbport=3306 --dbname=strapi_test --dbusername=strapi --dbpassword=strapi
      - name: Run tests
        run: |
          STRAPI_DISABLE_EE=true yarn run -s test:start-app & wait-on http://localhost:1337
          STRAPI_DISABLE_EE=true yarn run -s test:e2e

  e2e_ce_sqlite:
    runs-on: ubuntu-latest
    needs: [lint, unit_back, unit_front]
    name: 'E2E (sqlite node: ${{ matrix.node }})'
    strategy:
      matrix:
        node: [12, 14]
      max-parallel: 2
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node }}
      - name: Install modules
        run: |
          yarn && yarn global add wait-on
          echo "$(yarn global bin)" >> $GITHUB_PATH
      - name: Generate test app
        run: STRAPI_DISABLE_EE=true yarn run -s test:generate-app --dbclient=sqlite --dbfile=./tmp/data.db
      - name: Run tests
        run: |
          STRAPI_DISABLE_EE=true yarn run -s test:start-app & wait-on http://localhost:1337
          STRAPI_DISABLE_EE=true yarn run -s test:e2e

  e2e_ce_mongo:
    runs-on: ubuntu-latest
    needs: [lint, unit_back, unit_front]
    name: 'E2E (mongo node: ${{ matrix.node }})'
    strategy:
      matrix:
        node: [12, 14]
      max-parallel: 2
    services:
      mongo:
        image: mongo
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node }}
      - name: Install modules
        run: |
          yarn && yarn global add wait-on
          echo "$(yarn global bin)" >> $GITHUB_PATH
      - name: Generate test app
        run: STRAPI_DISABLE_EE=true yarn run -s test:generate-app --dbclient=mongo --dbhost=localhost --dbport=27017 --dbname=strapi_test
      - name: Run tests
        run: |
          STRAPI_DISABLE_EE=true yarn run -s test:start-app & wait-on http://localhost:1337
          STRAPI_DISABLE_EE=true yarn run -s test:e2e

#
# EE
#
# e2e_ee_pg:
#   runs-on: ubuntu-latest
#   needs: [lint, unit_back, unit_front]
#   name: '[EE] E2E tests (postgres:${{ matrix.postgres }} node: ${{ matrix.node }})'
#   if: github.event.pull_request.head.repo.full_name == github.repository
#   strategy:
#     matrix:
#       node: [ 12, 14]
#       postgres: [13, 12, 11, 10]
#     max-parallel: 2
#   services:
#     postgres:
#       # Docker Hub image
#       image: postgres:${{ matrix.postgres }}
#       # Provide the password for postgres
#       env:
#         POSTGRES_USER: strapi
#         POSTGRES_PASSWORD: strapi
#         POSTGRES_DB: strapi_test
#       # Set health checks to wait until postgres has started
#       options: >-
#         --health-cmd pg_isready
#         --health-interval 10s
#         --health-timeout 5s
#         --health-retries 5
#       ports:
#         # Maps tcp port 5432 on service container to the host
#         - 5432:5432
#   steps:
#     - uses: actions/checkout@v2
#     - uses: actions/setup-node@v2-beta
#       with:
#         node-version: ${{ matrix.node }}
#     - name: Install modules
#       run: |
#         yarn && yarn global add wait-on
#         echo "$(yarn global bin)" >> $GITHUB_PATH
#     - name: Generate test app
#       run: yarn run -s test:generate-app --dbclient=postgres --dbhost=localhost --dbport=5432 --dbname=strapi_test --dbusername=strapi --dbpassword=strapi
#     - name: Start test app
#       run: yarn run -s test:start-app & wait-on http://localhost:1337
#     - name: Run e2e tests
#       run: yarn run -s test:e2e
